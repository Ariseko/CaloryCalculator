from aiogram import types, F, Router
from aiogram.filters import CommandStart, Command
from aiogram import Bot
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from datetime import datetime

from config import TOKEN
from app.keyboards import *
from app.database import Database

import re

router = Router()
bot = Bot(token=TOKEN)
db = Database('database.db')


class Calculator(StatesGroup):
    gender = State()
    height = State()
    weight = State()
    age = State()
    activity = State()


class MessagesAdding(StatesGroup):
    gettext = State()


class Broadcast(StatesGroup):
    get_type = State()
    get_photo = State()
    get_video = State()
    get_text = State()
    waiting_photo = State()
    waiting_video = State()

igor_id = 337652760
photo_ids = []


@router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer_video_note('DQACAgIAAxkBAAIB_WYS8JntYAUKNBFaM7HqkyceYg7aAAKnSwACLgSZSAUfLxC-lc59NAQ')
    await message.answer('–ü—Ä–∏–≤–µ—Ç, —Ö–æ—á–µ—à—å —Ä–∞—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–ª–æ—Ä–∏–∏?', reply_markup=first_message_kb)


@router.message(F.video_note)
async def get_id_of_video_note(message: types.Message):
    await message.answer(f'{message.video_note}')


@router.callback_query(F.data == 'answer_NO_for_fat_question')
async def first_answer_no(callback_query: types.CallbackQuery):
    await callback_query.answer('')
    await callback_query.message.edit_text('–û—á–µ–Ω—å –∂–∞–ª—å(\n\n'
                                           '–ù–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')


@router.callback_query(F.data == 'answer_YES_for_fat_question')
async def first_answer_yes(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer('')
    await callback_query.message.edit_text('üë±‚Äç‚ôÇÔ∏è –ö—Ç–æ —Ç—ã? üë±‚Äç‚ôÄÔ∏è',
                                           reply_markup=gender_kb)
    await state.set_state(Calculator.gender)


@router.callback_query(Calculator.gender)
async def get_gender(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer('')
    if callback_query.data == 'Male':
        await state.update_data(gender='male')
    elif callback_query.data == 'Female':
        await state.update_data(gender='female')

    await bot.send_message(callback_query.from_user.id, '<b>–ö–∞–∫–æ–π –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö?</b> üìè \n'
                                                        '<i>–î–µ—Å—è—Ç—ã–µ —á–∞—Å—Ç–∏ –ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.</i>\n'
                                                        '<i>–ü—Ä–∏–º–µ—Ä: 170,5</i>', parse_mode='html')
    await state.set_state(Calculator.height)


@router.message(Calculator.height)
async def get_activity(message: types.Message, state: FSMContext):
    await state.update_data(height=message.text)
    await state.set_state(Calculator.weight)
    await message.answer('<b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–µ—Å –≤ –∫–≥ ‚öñÔ∏è</b>\n'
                         '<i>–î–µ—Å—è—Ç—ã–µ —á–∞—Å—Ç–∏ –ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.</i> \n'
                         '<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 68,9</i>', parse_mode='html')
    print(message.entities)


@router.message(Calculator.weight)
async def get_age(message: types.Message, state: FSMContext):
    await state.update_data(weight=message.text)
    await state.set_state(Calculator.age)
    await message.answer('<b>–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?</b> üóì ', parse_mode='html')


@router.message(Calculator.age)
async def get_height(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)
    await state.set_state(Calculator.activity)
    await message.answer('‚õπÔ∏è <b>–°–∫–æ–ª—å–∫–æ –≤—ã –¥–≤–∏–≥–∞–µ—Ç–µ—Å—å?</b> ‚õπÔ∏è‚Äç‚ôÄÔ∏è\n\n'
                         '1Ô∏è‚É£ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ—á—Ç–∏ –Ω–µ—Ç</b>: <i>–¥–æ 8–∫ —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å</i>. üéÆ\n\n'
                         '<b>2Ô∏è‚É£–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: </b><i>8-10–∫ —à–∞–≥–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏–ª–∏ 7-8–∫ —à–∞–≥–æ–≤ + 2-3 –ª–µ–≥–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ —á–∞—Å—É. üé≥</i>\n\n'
                         '<b>3Ô∏è‚É£–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: </b><i>8-10–∫ —à–∞–≥–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å + 3 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–∏–Ω–∏–º—É–º –ø–æ —á–∞—Å—É. üèåÔ∏è‚Äç‚ôÇÔ∏è</i>\n\n'
                         '<b>4Ô∏è‚É£–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: </b><i>10-15–∫ —à–∞–≥–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–ª—é—Å 3-4 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ –ø–æ–ª—Ç–æ—Ä–∞-–¥–≤–∞ —á–∞—Å–∞. üèÑ‚Äç‚ôÇÔ∏è</i>\n\n'
                         '<b>5Ô∏è‚É£–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> <i>12-20–∫ —à–∞–≥–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–ª—é—Å 4-6 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ –ø–æ–ª—Ç–æ—Ä–∞-–¥–≤–∞ —á–∞—Å–∞.</i> üßó\n\n',
                         reply_markup=activity_kb, parse_mode='html')


@router.callback_query(Calculator.activity)
async def get_weight(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(activity=callback_query.data)
    data = await state.get_data()

    gender = data['gender']
    age = int(data['age'])
    height = float(str(data['height']).replace(',', '.').replace(' ', ''))
    weight = float(str(data['weight']).replace(',', '.').replace(' ', ''))
    activity = float(data['activity'])

    baseMetabolismFirst = (9.99 * weight) + (6.25 * height) - (4.92 * age)

    if gender == "male":
        baseMetabolismMale = baseMetabolismFirst + 5
        calloryMale = baseMetabolismMale * activity

        await bot.send_message(callback_query.from_user.id,
                               f'‚ñ™Ô∏è<b>–í–∞—à –±–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º —Ä–∞–≤–µ–Ω:</b>\n‚¨áÔ∏è<i>–≠—Ç–æ –∫–∞–ª–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–∂–∏–≥–∞—é—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–æ–∫–æ–µ, –∏ —ç–Ω–µ—Ä–≥–∏—è —Ç—Ä–∞—Ç–∏—Ç—Å—è –Ω–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥—ã—Ö–∞–Ω–∏—è, –∫—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ç–µ–ª–∞ –∏ —Ç.–¥.</i> ‚¨áÔ∏è\n\n<b>{round(baseMetabolismMale)}\n\n\n</b>'
                               f'‚ñ™Ô∏è–í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–µ—Å–∞ (–≤—ã –Ω–µ —Ö—É–¥–µ–µ—Ç–µ –∏ –Ω–µ –Ω–∞–±–∏—Ä–∞–µ—Ç–µ –≤–µ—Å) —Å —Ç–µ–∫—É—â–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é —Ä–∞–≤–Ω–∞:\n\n<b>{round(calloryMale)}</b>\n\n\n'
                               f'‚ñ™Ô∏è <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π:</b>\n'
                               f'10% - {round(calloryMale * 0.9)} –ö–ö–ê–õ\n'
                               f'15% - {round(calloryMale * 0.85)} –ö–ö–ê–õ\n\n'
                               f'‚ñ™Ô∏è<b>–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞:</b>\n'
                               f'20% - {round(calloryMale * 0.8)} –ö–ö–ê–õ\n'
                               f'25% - {round(calloryMale * 0.75)} –ö–ö–ê–õ\n\n'
                               f'üîª–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Å–∞: –¥–æ 1% –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–µ—Å–∞ –≤ –Ω–µ–¥–µ–ª—é',
                               parse_mode='html')

    elif gender == "female":
        baseMetabolismFemale = baseMetabolismFirst - 161
        calloryFemale = baseMetabolismFemale * activity
        await bot.send_message(callback_query.from_user.id,
                               f'‚ñ™Ô∏è<b>–í–∞—à –±–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º —Ä–∞–≤–µ–Ω:</b>\n‚¨áÔ∏è<i>–≠—Ç–æ –∫–∞–ª–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–∂–∏–≥–∞—é—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–æ–∫–æ–µ, –∏ —ç–Ω–µ—Ä–≥–∏—è —Ç—Ä–∞—Ç–∏—Ç—Å—è –Ω–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥—ã—Ö–∞–Ω–∏—è, –∫—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ç–µ–ª–∞ –∏ —Ç.–¥.</i> ‚¨áÔ∏è\n\n<b>{round(baseMetabolismFemale)}\n\n\n</b>'
                               f'Ô∏è–í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–µ—Å–∞ (–≤—ã –Ω–µ —Ö—É–¥–µ–µ—Ç–µ –∏ –Ω–µ –Ω–∞–±–∏—Ä–∞–µ—Ç–µ –≤–µ—Å) —Å —Ç–µ–∫—É—â–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é —Ä–∞–≤–Ω–∞:\n\n<b>{round(calloryFemale)}</b>\n\n\n'
                               f'‚ñ™Ô∏è <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π:</b>\n'
                               f'10% - {round(calloryFemale * 0.9)} –ö–ö–ê–õ\n'
                               f'15% - {round(calloryFemale * 0.85)} –ö–ö–ê–õ\n\n'
                               f'‚ñ™Ô∏è<b>–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞:</b>\n'
                               f'20% - {round(calloryFemale * 0.8)} –ö–ö–ê–õ\n'
                               f'25% - {round(calloryFemale * 0.75)} –ö–ö–ê–õ\n\n'
                               f'üîª–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Å–∞: –¥–æ 1% –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–µ—Å–∞ –≤ –Ω–µ–¥–µ–ª—é',
                               parse_mode='html')

    await bot.send_message(callback_query.from_user.id,
                           f'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–ª–æ—Ä–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')

    message_entitie = db.get_messages()
    input_string = message_entitie[1]
    input_string = input_string[1:-1]
    entity_list = []

    regex = r"MessageEntity\(type='(\w+)', offset=(\d+), length=(\d+), url=(\w+), user=(\w+), language=(\w+), custom_emoji_id=(\w+)\)"

    matches = re.findall(regex, input_string)
    for match in matches:
        entity_list.append(
            types.MessageEntity(
                type=f'{match[0]}',
                offset=match[1],
                length=match[2],
                url=f'{match[3]}',
            )
        )

    await bot.send_message(callback_query.from_user.id, message_entitie[0], entities=entity_list)

    if not db.user_exists(callback_query.from_user.id):
        db.add_user(callback_query.from_user.id, callback_query.from_user.username, datetime.today())
        await bot.send_message(337652760, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback_query.from_user.username} –ø–æ—Å—á–∏—Ç–∞–ª —Å–≤–æ–∏ –∫–∞–ª–ª–æ—Ä–∏–∏\n\n'
                                           f'<b>–ü–æ–ª</b>: {gender}\n'
                                           f'<b>–í–æ–∑—Ä–∞—Å—Ç</b>: {age}\n'
                                           f'<b>–í–µ—Å</b>: {weight}\n'
                                           f'<b>–†–æ—Å—Ç</b>: {height}\n'
                                           f'<b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>: {activity}',parse_mode='html')

    await state.clear()


@router.message(Command('edit'))
async def edit_last_message(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç')
    await state.set_state(MessagesAdding.gettext)


@router.message(MessagesAdding.gettext)
async def cmd_sad(message: types.Message, state: FSMContext):
    await state.clear()
    text = message.text
    entities = message.entities
    entities_str = str(entities)
    db.update_message(text, entities_str)


@router.message(Command('sendAll'))
async def send_all(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
    await state.set_state(Broadcast.get_text)


@router.message(Broadcast.get_text)
async def broadcast(message: types.Message, state: FSMContext):
    text = message.text
    entities = message.entities
    entities_str = str(entities)
    db.update_message_for_broadcast(text, entities_str)

    await message.answer('–ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ?', reply_markup=broadcast_kb)
    await state.set_state(Broadcast.get_type)


@router.callback_query(Broadcast.get_type)
async def broadcast_type(callbackquery: types.CallbackQuery, state: FSMContext):
    await callbackquery.answer()
    if callbackquery.data == 'video':
        await bot.send_message(callbackquery.from_user.id, '–û—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ')
        await state.set_state(Broadcast.get_video)
    elif callbackquery.data == 'photo':
        await bot.send_message(callbackquery.from_user.id, '–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ')
        await state.set_state(Broadcast.get_photo)
    elif callbackquery.data == 'nothing':
        await callbackquery.message.answer('Ok, –Ω–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É')

        message_entitie_for_broadcast = db.get_messages_for_broadcast()
        input_string_for_broadcast = message_entitie_for_broadcast[1]
        input_string_for_broadcast = input_string_for_broadcast[1:-1]
        entity_list = []

        regex = r"MessageEntity\(type='(\w+)', offset=(\d+), length=(\d+), url=(\w+), user=(\w+), language=(\w+), custom_emoji_id=(\w+)\)"

        matches = re.findall(regex, input_string_for_broadcast)
        for match in matches:
            entity_list.append(
                types.MessageEntity(
                    type=f'{match[0]}',
                    offset=match[1],
                    length=match[2],
                    url=f'{match[3]}',
                )
            )

        all_users = db.get_users()
        for user in all_users:
            await bot.send_message(user[0], message_entitie_for_broadcast[0], entities=entity_list)

        await state.clear()


@router.message(Broadcast.get_photo, F.photo)
async def get_photo(message: types.Message, state: FSMContext):
    photo_data = message.photo[-1]
    await message.answer('–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏')

    message_entitie_for_broadcast = db.get_messages_for_broadcast()
    input_string_for_broadcast = message_entitie_for_broadcast[1]
    input_string_for_broadcast = input_string_for_broadcast[1:-1]
    entity_list = []

    regex = r"MessageEntity\(type='(\w+)', offset=(\d+), length=(\d+), url=(\w+), user=(\w+), language=(\w+), custom_emoji_id=(\w+)\)"

    matches = re.findall(regex, input_string_for_broadcast)
    for match in matches:
        entity_list.append(
            types.MessageEntity(
                type=f'{match[0]}',
                offset=match[1],
                length=match[2],
                url=f'{match[3]}',
            )
        )

    all_users = db.get_users()
    for user in all_users:
        await bot.send_photo(chat_id=user[0],
                             photo=photo_data.file_id,
                             caption=message_entitie_for_broadcast[0],
                             caption_entities=entity_list)

    await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞')
    await state.clear()


